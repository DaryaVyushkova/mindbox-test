{"version":3,"file":"static/js/745.a4216263.chunk.js","mappings":"uLAWO,MAAMA,EACF,GADEA,EAEJ,G,aCHT,MAiDA,EAjD4BC,KAC1B,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAAiBJ,IACxCK,EAAOC,IAAYF,EAAAA,EAAAA,UAAiBJ,IACrC,QAAEO,EAASC,MAAOC,IAAaC,EAAAA,EAAAA,MAO/BC,EAAgBA,KACpB,MAAMC,EAAmB,CACvBC,GAAIC,KAAKC,MACTC,KAAMd,EACNe,WAAW,GAGbC,OAAOC,KAAK,QAAS,WAAY,CAC/BC,eAAgB,OAChBC,YAAaC,KAAKC,UAAUX,GAC5BY,MAAO,IC3BuBC,EAClCvB,EACAO,EACAF,EACAD,EACAH,KAEA,MAAME,ECRoBqB,EAACxB,EAAiBO,IACvCP,EAAQyB,OAGTlB,EAASmB,MAAMC,GAASA,EAAKb,OAASd,EAAQyB,SACzC,2BAEF,GALE,yBDMKD,CAAaxB,EAASO,GAChCJ,EACFC,EAASD,IAETE,EAAQ,CACNM,GAAIC,KAAKC,MACTC,KAAMd,EACNe,WAAW,IAEbd,EAAW,IACb,EDaEsB,CAAqBvB,EAASO,EAAUF,EAASD,GAAU,IACzDH,EAAW,KACZ,EAGH,OACE2B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACG,EAAAA,EAAMC,QAAO,CAACC,MAAO,CAAEC,MAAO,QAASJ,SAAA,EACtCK,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,YAAU,EACVC,aAAc7B,EACd8B,OAAQpC,EAAQ,QAAU,GAC1BqC,KAAK,OACLlB,MAAOtB,EACPyC,SAhCmBC,IACzBtC,EAAS,IACTH,EAAWyC,EAAEC,OAAOrB,MAAM,EA+BpBsB,YAAY,4BAEdT,EAAAA,EAAAA,KAACU,EAAAA,GAAM,CAACC,UAAW9C,EAAQyB,OAAQsB,QAAStC,EAAcqB,SAAC,WAI5D3B,IAASgC,EAAAA,EAAAA,KAAA,KAAGa,UAAW,eAAelB,SAAE3B,MACxC,C","sources":["Types/Todo.tsx","components/Todo/TodoInput/TodoInput.tsx","utils/todoSubmission.ts","utils/todoValidation.ts"],"sourcesContent":["export interface ITodo {\n  id: number\n  text: string\n  completed: boolean\n}\n\nexport interface TodoFormAttributes {\n  newTodo: string\n  error: string\n}\n\nexport const defaultAttributes: TodoFormAttributes = {\n  newTodo: '',\n  error: '',\n}\n","import React, { useState } from 'react'\nimport { Button, Input, Space } from 'antd'\n\nimport { useTodos } from 'context/TodoContext'\nimport { defaultAttributes } from 'Types/Todo'\nimport { submitTodoAttributes } from 'utils/todoSubmission'\nimport { ITodo } from 'Types/Todo'\n\nimport './styles.css'\n\nconst TodoInput: React.FC = () => {\n  const [newTodo, setNewTodo] = useState<string>(defaultAttributes.newTodo)\n  const [error, setError] = useState<string>(defaultAttributes.error)\n  const { addTodo, todos: allTodos } = useTodos()\n\n  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setError('')\n    setNewTodo(e.target.value)\n  }\n\n  const handleAddTodo = () => {\n    const todoToAdd: ITodo = {\n      id: Date.now(),\n      text: newTodo,\n      completed: false,\n    }\n\n    window.gtag('event', 'add_todo', {\n      event_category: 'Todo',\n      event_label: JSON.stringify(todoToAdd),\n      value: 1,\n    })\n\n    submitTodoAttributes(newTodo, allTodos, addTodo, setError, () =>\n      setNewTodo('')\n    )\n  }\n\n  return (\n    <>\n      <Space.Compact style={{ width: '100%' }}>\n        <Input\n          allowClear\n          onPressEnter={handleAddTodo}\n          status={error ? 'error' : ''}\n          type=\"text\"\n          value={newTodo}\n          onChange={handleFieldChange}\n          placeholder=\"What needs to be done?\"\n        />\n        <Button disabled={!newTodo.trim()} onClick={handleAddTodo}>\n          Add\n        </Button>\n      </Space.Compact>\n      {error && <p className={'errorMessage'}>{error}</p>}\n    </>\n  )\n}\n\nexport default TodoInput\n","import { validateTodo } from 'utils/todoValidation'\nimport { ITodo } from 'Types/Todo'\n\nexport const submitTodoAttributes = (\n  newTodo: string,\n  allTodos: ITodo[],\n  addTodo: (todo: ITodo) => void,\n  setError: (error: string) => void,\n  setNewTodo: (value: string) => void\n) => {\n  const error = validateTodo(newTodo, allTodos)\n  if (error) {\n    setError(error)\n  } else {\n    addTodo({\n      id: Date.now(),\n      text: newTodo,\n      completed: false,\n    })\n    setNewTodo('')\n  }\n}\n","import { ITodo } from 'Types/Todo'\n\nexport const validateTodo = (newTodo: string, allTodos: ITodo[]): string => {\n  if (!newTodo.trim()) {\n    return 'Should have characters'\n  }\n  if (allTodos.some((todo) => todo.text === newTodo.trim())) {\n    return 'This task already exists'\n  }\n  return ''\n}\n"],"names":["defaultAttributes","TodoInput","newTodo","setNewTodo","useState","error","setError","addTodo","todos","allTodos","useTodos","handleAddTodo","todoToAdd","id","Date","now","text","completed","window","gtag","event_category","event_label","JSON","stringify","value","submitTodoAttributes","validateTodo","trim","some","todo","_jsxs","_Fragment","children","Space","Compact","style","width","_jsx","Input","allowClear","onPressEnter","status","type","onChange","e","target","placeholder","Button","disabled","onClick","className"],"sourceRoot":""}