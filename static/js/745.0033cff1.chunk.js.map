{"version":3,"file":"static/js/745.0033cff1.chunk.js","mappings":"uLAWO,MAAMA,EACF,GADEA,EAEJ,G,aCHT,MAmCA,EAnC4BC,KAC1B,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAASJ,IAChCK,EAAOC,IAAYF,EAAAA,EAAAA,UAASJ,IAC7B,QAAEO,EAASC,MAAOC,IAAaC,EAAAA,EAAAA,MAO/BC,EAAgBA,KCjBUC,EAChCV,EACAO,EACAF,EACAD,EACAH,KAEA,MAAME,ECRoBQ,EAACX,EAAiBO,IACvCP,EAAQY,OAGTL,EAASM,MAAMC,GAASA,EAAKC,OAASf,EAAQY,SACzC,2BAEF,GALE,yBDMKD,CAAaX,EAASO,GAChCJ,EACFC,EAASD,IAETE,EAAQ,CACNW,GAAIC,KAAKC,MACTH,KAAMf,EACNmB,WAAW,IAEblB,EAAW,IACb,EDCES,CAAmBV,EAASO,EAAUF,EAASD,EAAUH,EAAW,EAGtE,OACEmB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACG,EAAAA,EAAMC,QAAO,CAACC,MAAO,CAAEC,MAAO,QAASJ,SAAA,EACtCK,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,YAAU,EACVC,aAAcrB,EACdsB,OAAQ5B,EAAQ,QAAU,GAC1B6B,KAAK,OACLC,MAAOjC,EACPkC,SAlBmBC,IACzB/B,EAAS,IACTH,EAAWkC,EAAEC,OAAOH,MAAM,EAiBpBI,YAAY,4BAEdV,EAAAA,EAAAA,KAACW,EAAAA,GAAM,CAACC,UAAWvC,EAAQY,OAAQ4B,QAAS/B,EAAca,SAAC,WAI5DnB,IAASwB,EAAAA,EAAAA,KAAA,KAAGc,UAAW,eAAenB,SAAEnB,MACxC,C","sources":["Types/Todo.tsx","components/Todo/TodoInput/TodoInput.tsx","utils/todoSubmission.ts","utils/todoValidation.ts"],"sourcesContent":["export interface ITodo {\n  id: number\n  text: string\n  completed: boolean\n}\n\nexport interface TodoFormAttributes {\n  newTodo: string\n  error: string\n}\n\nexport const defaultAttributes: TodoFormAttributes = {\n  newTodo: '',\n  error: '',\n}\n","import React, { useState } from 'react'\nimport { Button, Input, Space } from 'antd'\n\nimport { useTodos } from 'context/TodoContext'\n\nimport { defaultAttributes } from 'Types/Todo'\nimport { attributesToSubmit } from 'utils/todoSubmission'\n\nimport './styles.css'\n\nconst TodoInput: React.FC = () => {\n  const [newTodo, setNewTodo] = useState(defaultAttributes.newTodo)\n  const [error, setError] = useState(defaultAttributes.error)\n  const { addTodo, todos: allTodos } = useTodos()\n\n  const handleFieldChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setError('')\n    setNewTodo(e.target.value)\n  }\n\n  const handleAddTodo = () => {\n    attributesToSubmit(newTodo, allTodos, addTodo, setError, setNewTodo)\n  }\n\n  return (\n    <>\n      <Space.Compact style={{ width: '100%' }}>\n        <Input\n          allowClear\n          onPressEnter={handleAddTodo}\n          status={error ? 'error' : ''}\n          type=\"text\"\n          value={newTodo}\n          onChange={handleFieldChange}\n          placeholder=\"What needs to be done?\"\n        />\n        <Button disabled={!newTodo.trim()} onClick={handleAddTodo}>\n          Add\n        </Button>\n      </Space.Compact>\n      {error && <p className={'errorMessage'}>{error}</p>}\n    </>\n  )\n}\n\nexport default TodoInput\n","import { validateTodo } from 'utils/todoValidation'\nimport { ITodo } from 'Types/Todo'\n\nexport const attributesToSubmit = (\n  newTodo: string,\n  allTodos: ITodo[],\n  addTodo: (todo: ITodo) => void,\n  setError: (error: string) => void,\n  setNewTodo: (value: string) => void\n) => {\n  const error = validateTodo(newTodo, allTodos)\n  if (error) {\n    setError(error)\n  } else {\n    addTodo({\n      id: Date.now(),\n      text: newTodo,\n      completed: false,\n    })\n    setNewTodo('')\n  }\n}\n","import { ITodo } from 'Types/Todo'\n\nexport const validateTodo = (newTodo: string, allTodos: ITodo[]): string => {\n  if (!newTodo.trim()) {\n    return 'Should have characters'\n  }\n  if (allTodos.some((todo) => todo.text === newTodo.trim())) {\n    return 'This task already exists'\n  }\n  return ''\n}\n"],"names":["defaultAttributes","TodoInput","newTodo","setNewTodo","useState","error","setError","addTodo","todos","allTodos","useTodos","handleAddTodo","attributesToSubmit","validateTodo","trim","some","todo","text","id","Date","now","completed","_jsxs","_Fragment","children","Space","Compact","style","width","_jsx","Input","allowClear","onPressEnter","status","type","value","onChange","e","target","placeholder","Button","disabled","onClick","className"],"sourceRoot":""}